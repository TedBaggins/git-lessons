Конфигурация:
git congig --global user.name "Имя Фамилия"
git config --global user.email "Ваш email"
git config --global color.ui true
git config --global core.quotepath off
git config --global core.autocrlf false

cd E:\Programs/OpenServer/OpenServer/domains/git

Создание проекта:
mkdir название_проекта
cd название проекта
git init

"создание/изменение файла"
git add
git commit

git status - для статуса проекта
git log - история коммитов
git diff - разница между текущим неотслеживаемым состоянием репозитория и последним снимком репозитория
git diff --staged - разница между текущим отслеживаемым состоянием репозитория и последним снимком репозитория
git diff COMMIT_ID - разница между текущим состоянием репозитория и указанным снимком

git add Test.java; git add Test.java Hello.java; git add *.java
git add . - добавление всех файлов в текущей папке
git add someDir/*.java - добавление всех файлов в папке someDir с расширением .java
git add someDir/ - добавление всех файлов в папке someDir
git add "*.java" - добавление всех файлов в проекте с расширением .java
git commit -m "Сообщение снимка" - коммит с сообщением
git commit -a -m "Сообщение коммита" - последовательное выполнение git add . и git commit -m "Сообщение коммита", но новые файлы игнорируются, добавляются только измененные.
git commit --amend -m "Новое сообщение коммита" - дополняет последний коммит, добавляя в него свежие изменения, также меняет сообщение последнего коммита. Новый коммит не создается

HEAD^^; HEAD~2 - смещение указателя

git reset - для отмены каких-либо изменений в проекте, откату проекта к какому-то снимку
--soft; --mixed; --hard - режимы git reset
git reset [--soft | --mixed | --hard] [commit]
git reset --hard - возвращает проект к указанному коммиту, при этом полностью удаляет все коммиты после указанного
git reset --mixed - возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в неотслеживаемую (unstaged) зону
git reset --soft - возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в отслеживаемую (staged) зону
Без указания параметра исп. --mixed, без коммита исп. HEAD
--hard не удаляет файлы, если они в неотслеживаемой зоне

git checkout - используется для перемещения между коммитами, версиями отдельных файлов и ветками. При перемещении между коммитами указатель HEAD будет находиться в состоянии detached и следующие сделанные коммиты будут удалены
git checkout <хэш commit #2>; git checkout HEAD^^; git checkout HEAD~2
git checkout master - переход обратно к актуальному коммиту
git checkout <указатель коммита> -- путь_до_файла_1 путь_до_файла_2 - возвращение файлов к версии указанного коммита
git checkout -- путь_до_файла_1 путь_до_файла_2 - возвращает файлы к версии, которая была у них в последнем коммите (HEAD). Работает только для неотслеживаемых изменений.
git checkout -- file1.txt
git checkout -- . - возвращает все файлы к версии, которая была у них в последнем коммите (HEAD). Работает только для неотслеживаемых изменений.
Если нужно удалить отслеживаемые изменения (был git add), то нужно сделать git reset и потом git checkout -- .

git clean - позволяет удалить неотслеживаемые файлы
git clean -n - покажет, какие файлы будут удалены
git clean -f - удаляет файлы

git remote - команда для настройки и просмотра удаленных репозиториев
git remote -v - просмотр списка существующих удаленных репозиториев
git remote add НАЗВАНИЕ_РЕПОЗИТОРИЯ АДРЕС_РЕПОЗИТОРИЯ - добавление нового удаленного репозитория, который находится по указанному адресу. На своем компьютере к удаленному репозиторию нужно обращаться по его названию
git remote remove НАЗВАНИЕ_РЕПОЗИТОРИЯ - удаление репозитория с указанным названием

git remote add origin https://github.com/TedBaggins/git-lessons.git
На своем компьютере хранится только ссылка на удаленный репозиторий. origin - название этой ссылки

git push - команда для отправки локального репозитория на удаленный
git push НАЗВАНИЕ_УДАЛЕННОГО_РЕПОЗИТОРИЯ ВЕТКА
git push origin master - отправление на удал. реп. с именем origin свою ветку master
git pull - команда для получения обновлений с удаленного репозитория, при git pull без других параметров скачивает все ветки
git pull origin master - после этого произойдет синхронизация локального реп. с удаленным
git fetch - скачивает удаленные ветки с репозитория, но не синхронизирует с локальным

git clone - для копирования удаленного репозитория в свой компьютер, заменяет git init, remote и т.д.
git clone git@github.com:TedBaggins/git-lessons.git

git branch название_ветки - команда для создания новой ветки
git branch - просмотр текущей ветки
git branch -d название_ветки - команда для удаления ветки
git branch -r - получение списка веток в удаленных репозиториях
git checkout название_ветки - переключение между ветками
git merge название_ветки - слияние ветки

После конфликтного merge нужно решить конфликт в проблемном файле, дальше сделать git add . и git commit
После конфликтного pull нужно решить конфликт в проблемном файле, дальше сделать git add . и git commit
Чтобы переместиться на другую ветку, скачанную после git pull, нужно исп. git checkout название_ветки

git remote show origin - показывает, синхронизированы ли локальные ветки с ветками на удаленном репозитории

git push --delete название_репозитория название_ветки - для удаления ветки на удаленном репозитории
git push --delete origin add-feature1

git branch -D название_ветки - для удаления локальной ветки, на которой есть изменения, не залитые в master

git rebase - как merge, только не создает merge commit.
git checkout add-feature1
git rebase master
Сначала добавляются все коммиты из master, потом поверх коммиты из другой ветки
git checkout master
git rebase add-feature1
Или наоборот, сперва добавляются коммиты и другой ветки, а потом из master
git rebase --continue
git rebase --abort
При конфликте слияния сперва разрешается конфликт, затем делается --continue или --abort
